
/* 
printsy Compiler Features:
1. Accept single line comments and multi-line comments
   - Single line comments use the "//" expression
   - Multi line comments are shown with this example.
2. Supported types: 
   - int
   - float
3. Word Format support
4. Variable type declaration
   - Examples:
      - declare exampleVar as int;
      - declare complexNum as float;
3. Support for addition, subtraction, multiplication, and division operations
   - Operators (Formula Format): +, -, *, /
   - Operators (Word Format): plus, minus, times, div
4. Order of operations (PEMDAS)
5. Negative numbers (10 or -10 are valid number formats)
6. Action operations (functions)
   - Format: action {type} {name} ({type name}, {type name}, ...){ {code here} report x;}
   - Example:
      action int getNumber(int a, float b, int c, int d) {
         let a equal c plus d;
         report a plus c;
      }
7. Function calls within operations
   - Format: let {variable} equal {function_name}(param1, param2, ...);
   - Examples: 
      - let x equal getNumber(1, 2, r, m);
      - let y equal x div getNumber(3, 4, 5, r);
8. Print statements
   - Format: print {variable}
   - Example: print x;
9. Line break creation using the "addline" command
10. Intuitive semantic checks for program debugging

*/ 


int aNumber;
float secondNumber;
string someLetter; // unsupported type
float justAverage;

float test;

action float average(float a, float b, float c){
	float avg;
	let avg equal (a plus b plus c) div -3.3;
	report avg;
}

action int unreachable(int x, int y){
   /*
	This action (or function) does nothing and should
	Be removed from IR code in the optimization step
   */

   int result;
   let result equal x times y plus x times y;

   report result;
}

action int displayMessage(){
	report -2 times 3;
}

action float ambitiousFunction (float a, float b, float c){

   /* great optimization opportunity */

   float result;
 
   result equal (average(a, b, c) plus average(a, b, c)) div 2.0;

   report result;
}

action float divideHalf(float a) {
   float result;
   let result equal a div 2.0;
   report result;
}

let justAverage equal average(12.5, -331.7, 25.8);
let aNumber equal displayMessage();
print justAverage;
addline;

let justAverage equal justAverage times (justAverage plus 3.0);
let justAverage equal average(justAverage, 0.0, 1.1);
let aNumber equal displayMessage();
print justAverage;
addline;

aNumber equal displayMessage();
print aNumber;
addline;
aNumber equal aNumber div (aNumber plus aNumber times aNumber);
print aNumber;
addline;

justAverage equal ambitiousFunction(13.43, 20.3, 5.537);
aNumber equal displayMessage();
print justAverage;
addline;

test equal divideHalf(3.0);
print test;
addline;