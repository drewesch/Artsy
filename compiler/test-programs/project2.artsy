declare message as string[50];

action int displayMessage(){
	let message[0] = "I"; 																		
	let message[1] = " ";																
	let message[3] = "a";
	let message[4] = "n";
	let message[5] = " ";
	let message[6] = "p";
	let message[7] = "r";
	let message[8] = "i";
	let message[9] = "n";
	let message[10] = "t";
	let message[11] = ":";
	declare a as int;
	let a = 1;
	if(a == 1) {
		declare b as int;
		let b = 2;
	}
	/# message[100] = "Error"; 	#/														
	
	report 0;
}

declare anywhere as int; 										
let anywhere = 5;										
print anywhere; 									
print "done";																						
print 5;


/#1. semantic check for loop comparsion#/
/#2. semantic check for if comparsion#/
/#3. Add AST nodes in the parser for if statements and loops and Add symbol table support for if statements and loops (adding scopes declarations) #/
/#4. check that all ast and symbol are up to date#/ 
/#5. make sure all        root -> nodeType: =           are filled #/ 

declare t as flag;
declare f as flag;
declare n as flag;
declare k as flag;
 

declare a as int;
declare b as int;
declare x as int;
declare y as int;
declare z as int;
declare c as string;
declare d as string;

# declare majortest as string;
# let majortest = "hello";

declare majortest as int;
let majortest = 1;


let x = 0;
let a = 5;
let b = 3;
let y = x + a;
let t = TRUE; 								
let f = FALSE;								 
let n = (a > b);                             
let k = (a < b); 							 
let c = "c c c";
let d = "d d d";

while (majortest < 4){ 														/#1 should be error#/				
	declare abc as int;
	if (majortest < 1){														/#2 should be error#/
		declare h as int;
		let z = 5;
		print z;
		let x = x + 1;
		/#int ifone;#/  													/#3#/
	}
	elif (majortest == 1 || x < 0){        		
		let z = 6;
		print z;
		let x = x + 1;
		/#int iftwo; #/														/#3#/
		declare abcde as int;
	}
	elif (x == majortest && x > 1){				 
		let z = 7;
		print z;
		let x = x + 1;
	}
	else{
		let z = 8;
		print z;
		let x = x + 1;
		if (n == TRUE){				
			print c; 
			if (k == FALSE){			
				print d;
				declare abcdefg as int; 
			}
		}
	}
}

let z = 9;
print z; 

/#4. check that all ast and symbol are up to date#/ 
/#5. make sure all        root -> nodeType: =           are filled #/ 

declare check1 as int;
declare check2 as int;
let check1 = 1;
let check2 = 2;

while (check1 == 1){
	if (check2 == 2){
		declare check3 as int;
		let check3 = 5;
		print check3;
		let check2 = 3;
	}
	elif (check2 == 3){
		declare check4 as int;
		let check4 = 4;
		print check4;
		let check2 = 4;
	}
	else{
		declare check6 as int;
		let check6 = 6;
		print check6;
		let check2 = 6;
	}
}